#!/usr/bin/env node

var fs = require('fs');
var subarg = require('subarg');
var argv = subarg(process.argv.slice(2));
var createServer = require('../');
var config = {};
var server;

function collectRules(rules) {
    return rules.map(function(rule) {
        var event = rule.event;
        var match = rule.match;
        var exec = rule.exec;

        return event && match && exec && {
            event: event,
            match: match,
            exec: exec
        };
    }).filter(Boolean);
}

if (typeof argv.config == 'string') {
    config = JSON.parse(fs.readFileSync(argv.config));
}

if (argv.port !== undefined) {
    config.port = argv.port;

}
else if (process.argv.PORT !== undefined) {
    config.port = process.argv.PORT;
}

if (argv.host !== undefined) {
    config.host = String(argv.host);
}

if (argv.token !== undefined) {
    config.token = String(argv.token);
}

if (argv.path !== undefined) {
    config.path = String(argv.path);
}

if (argv.log !== undefined) {
    config.log = String(argv.log);
}

if (!Array.isArray(config.rules)) {
    config.rules = [];
}

if (argv.rule) {
    config.rules = config.rules.concat(
        collectRules(Array.isArray(argv.rule) ? argv.rule : [argv.rule])
    );
}

server = createServer(config);

server.listen.apply(server, config.host ? [config.port, config.host] : [config.port]);
